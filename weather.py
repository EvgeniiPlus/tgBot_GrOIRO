from dataclasses import dataclass
from typing import NamedTuple
from datetime import datetime

import requests

from config import token_weather


@dataclass
class TypeWeather:
    CLEAR = "–Ø—Å–Ω–æ ‚òÄ"
    CLOUDS = '–û–±–ª–∞—á–Ω–æ ‚òÅ'
    RAIN = '–î–æ–∂–¥—å üåß'
    DRIZZLE = '–î–æ–∂–¥—å üåß'
    THUNDERSTORM = '–ì—Ä–æ–∑–∞ ‚õà'
    SNOW = '–°–Ω–µ–≥ üå®'
    MIST = '–¢—É–º–∞–Ω üå´'


class Weather(NamedTuple):
    city: str
    temperature: float
    describe: TypeWeather
    himidity: int
    pressure: int
    wind_speed: float
    at_time: datetime
    sunrise: datetime
    sunset: datetime


class EmptyWeather(Exception):
    pass


def get_weather(city: str = '–ì—Ä–æ–¥–Ω–æ') -> Weather | EmptyWeather:
    r = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={token_weather}")

    if not r.status_code == 200:
        return EmptyWeather(f'–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {r.status_code}')

    try:
        data = r.json()
    except:
        return EmptyWeather(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞')

    if not data['cod'] == 200:
        return EmptyWeather('–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–≥–æ–¥–∞')

    cur_temp = data["main"]["temp"]
    weather_desc = data['weather'][0]['main']
    
    # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–∑ TypeWeather –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç weather_desc
    weather_desc = getattr(TypeWeather, weather_desc.upper())
    cur_humidity = data["main"]["humidity"]
    cur_pressure = data["main"]["pressure"]
    cur_wind = data["wind"]["speed"]
    at_time = datetime.fromtimestamp(data['dt'])
    sunrise_timestamp = datetime.fromtimestamp(data["sys"]["sunrise"])
    sunset_timestamp = datetime.fromtimestamp(data["sys"]["sunset"])

    return Weather(city=city, temperature=cur_temp, describe=weather_desc,
                   himidity=cur_humidity, pressure=cur_pressure, wind_speed=cur_wind,
                   at_time=at_time, sunrise=sunrise_timestamp, sunset=sunset_timestamp)


def main():
    weather = get_weather(city='–ì—Ä–æ–¥–Ω–æ')

    if isinstance(weather, EmptyWeather):
        raise weather

    print(f'–ü–æ–≥–æ–¥–∞ –≤ {weather.city} —Å–µ–π—á–∞—Å.\n'
          f'–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ {weather.at_time.strftime("%d.%m.%Y %H:%M")}.\n\n'
          f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature}–° {weather.describe}\n'
          f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.himidity}%\n'
          f'–î–∞–≤–ª–µ–Ω–∏–µ: {weather.pressure} –º–º.—Ä—Ç.—Å—Ç\n'
          f'–í–µ—Ç–µ—Ä: {weather.wind_speed} –º/—Å\n'
          f'–†–∞—Å—Å–≤–µ—Ç: {weather.sunrise.strftime("%d.%m.%Y %H:%M")}\n'
          f'–ó–∞–∫–∞—Ç: {weather.sunset.strftime("%d.%m.%Y %H:%M")}')


if __name__ == '__main__':
    main()
