from config import token_weather
from pprint import pprint
import datetime
import requests


def get_weather(city='–ì—Ä–æ–¥–Ω–æ', token_weather=token_weather):
    global wd
    code_to_smile = {
        'Clear': '–Ø—Å–Ω–æ ‚òÄ',
        'Clouds': '–û–±–ª–∞—á–Ω–æ ‚òÅ',
        'Rain': '–î–æ–∂–¥—å üåß',
        'Drizzle': '–î–æ–∂–¥—å üåß',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ ‚õà',
        'Snow': '–°–Ω–µ–≥ üå®',
        'Mist': '–¢—É–º–∞–Ω üå´'
    }

    try:
        r = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid={token_weather}")
        data = r.json()
        # pprint(data)
        cur_temp = data["main"]["temp"]
        weather = data['weather'][0]['main']
        if weather in code_to_smile:
            weather_desc = code_to_smile[weather]
        cur_humidity = data["main"]["humidity"]
        cur_pressure = data["main"]["pressure"]
        cur_wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M")
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M")

        return [city, cur_temp, weather_desc, cur_humidity, cur_pressure, cur_wind, sunrise_timestamp, sunset_timestamp]

        # print(f'–ü–æ–≥–æ–¥–∞ –≤ {city} —Å–µ–π—á–∞—Å.\n'
        #       f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_temp}–° {weather_desc}\n'
        #       f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {cur_humidity}%\n'
        #       f'–î–∞–≤–ª–µ–Ω–∏–µ: {cur_pressure} –º–º.—Ä—Ç.—Å—Ç\n'
        #       f'–í–µ—Ç–µ—Ä: {cur_wind} –º/—Å\n'
        #       f'–†–∞—Å—Å–≤–µ—Ç: {sunrise_timestamp}\n'
        #       f'–ó–∞–∫–∞—Ç: {sunset_timestamp}\n')

    except Exception as ex:
        print(ex)


def main():
    city = '–ì—Ä–æ–¥–Ω–æ'
    get_weather(city, token_weather)


if __name__ == '__main__':
    main()
